FROM ubuntu:noble

ENV DEBIAN_FRONTEND=noninteractive
ENV PATH="/root/.local/bin:${PATH}"

RUN --mount=type=cache,target=/var/cache/apt --mount=type=cache,target=/var/lib/apt \ 
    apt-get update && apt-get install -y --no-install-recommends \
    g++ \
    gcc \
    tzdata \
    curl \
    wget \
    zip \
    jq \
    git \
    vim \
    make \
    software-properties-common \
    python3 \
    python3-pip \
    python3-venv \
    pipx \
    bash-completion \
    build-essential \
    unzip \ 
    less \ 
    && apt-get upgrade -y


RUN echo 'git config --global credential.helper "cache --timeout=99999"' >> ~/.bashrc

RUN cat <<EOF >> ~/.bashrc
parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\\1)/'
}
PS1='\$(code=\${?##0};echo \${code:+\[\e[91m\][\${code}]})\[\e[0m\]\u@\h \[\e[32m\]\w \[\e[91m\]\$(parse_git_branch)\[\e[m\]Î» '
EOF


# install docker, can comment this out if you don't want to control docker from the container
RUN --mount=type=cache,target=/var/cache/apt --mount=type=cache,target=/var/lib/apt \ 
    install -m 0755 -d /etc/apt/keyrings \
    && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg \
    && chmod a+r /etc/apt/keyrings/docker.gpg \
    && echo \
        "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
        "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
        tee /etc/apt/sources.list.d/docker.list > /dev/null \
    && apt-get update \ 
    && apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

# install awscli
RUN curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" \
    && unzip awscliv2.zip \
    && ./aws/install \
    && rm -rf awscliv2.zip aws


# install gh cli
RUN  --mount=type=cache,target=/var/cache/apt --mount=type=cache,target=/var/lib/apt \ 
    (type -p wget >/dev/null || (apt update && apt-get install wget -y)) \
	&& mkdir -p -m 755 /etc/apt/keyrings \
        && out=$(mktemp) && wget -nv -O$out https://cli.github.com/packages/githubcli-archive-keyring.gpg \
        && cat $out | tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null \
	&& chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg \
	&& echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
	&& apt update \
	&& apt install gh -y


# install uv
WORKDIR /root
RUN pipx install uv && uv venv && uv pip install jupyterlab openai mcp-server-fetch


# Download and install nvm:
ENV NODE_VERSION 22.16.0
ENV NVM_DIR /usr/local/nvm
RUN mkdir -p $NVM_DIR
RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash 
RUN /bin/bash -c "source $NVM_DIR/nvm.sh && nvm install $NODE_VERSION && nvm use --delete-prefix $NODE_VERSION"
ENV NODE_PATH $NVM_DIR/versions/node/$NODE_VERSION/lib/node_modules
ENV PATH      $NVM_DIR/versions/node/$NODE_VERSION/bin:$PATH




# Install .NET
# RUN --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
#     --mount=target=/var/cache/apt,type=cache,sharing=locked \
#     <<EOF
# wget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh
# chmod +x dotnet-install.sh
# ./dotnet-install.sh --version latest
# EOF
# COPY NuGet.Config /root/.nuget/NuGet/NuGet.Config
# ENV PATH=$PATH:/root/.dotnet
# ENV DOTNET_ROOT=/root/.dotnet
# RUN dotnet tool install -g Microsoft.dotnet-interactive && dotnet interactive jupyter install





